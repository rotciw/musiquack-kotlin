name: Build and Push Workflow

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker login to ECR
        env:
          AWS_DEFAULT_REGION: eu-west-1
          ECR_BASE_URL: 170252364189.dkr.ecr.eu-west-1.amazonaws.com
          ECR_IMAGE_URL: musiquack-kotlin
          IMAGE_TAG_SHA: ${{ github.sha }}
        run: aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_BASE_URL

      - name: Build Docker Image
        env:
          AWS_DEFAULT_REGION: eu-west-1
          ECR_BASE_URL: 170252364189.dkr.ecr.eu-west-1.amazonaws.com
          ECR_IMAGE_URL: musiquack-kotlin
          IMAGE_TAG_SHA: ${{ github.sha }}
        run: docker build -t $ECR_BASE_URL/$ECR_IMAGE_URL:$IMAGE_TAG_SHA .

      - name: Push Docker Image to ECR
        env:
          AWS_DEFAULT_REGION: eu-west-1
          ECR_BASE_URL: 170252364189.dkr.ecr.eu-west-1.amazonaws.com
          ECR_IMAGE_URL: musiquack-kotlin
          IMAGE_TAG_SHA: ${{ github.sha }}
        run: docker push $ECR_BASE_URL/$ECR_IMAGE_URL:$IMAGE_TAG_SHA

  terraform:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./terraform/dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Terraform init and plan
        env:
          TF_ENV_spotify_clientid: ${{ secrets.SPOTIFY_CLIENTID }}
          TF_ENV_spotify_clientsecret: ${{ secrets.SPOTIFY_CLIENTSECRET }}
        run: |
          terraform init -input=false
          terraform plan -input=false -no-color -var="spotify_clientid=${{ secrets.SPOTIFY_CLIENTID }}" -var="spotify_clientsecret=${{ secrets.SPOTIFY_CLIENTSECRET }}" -out tf.plan

      - name: Terraform Show
        env:
          TF_ENV_spotify_clientid: ${{ secrets.SPOTIFY_CLIENTID }}
          TF_ENV_spotify_clientsecret: ${{ secrets.SPOTIFY_CLIENTSECRET }}
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ inputs.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tf.plan
        env:
          TF_ENV_spotify_clientid: ${{ secrets.SPOTIFY_CLIENTID }}
          TF_ENV_spotify_clientsecret: ${{ secrets.SPOTIFY_CLIENTSECRET }}
